性能调优
mysql
一、mysql索引数据结构详解
1、mysql的索引是表级别的
2、如果索引是字符串，他是使用的ascii码比较字符串的，然后排序

3、为什么InnoDB要有主键，为了创建基于主键的B+Tree索引文件。
如果表没有创建主键，innodb会从表中找一个不重复的字段为我们创建一个默认的索引！
如果表中不存在不重复的列，那么innodb会在后台生成一个int类型的默认的主键，用来生成b+tree索引文件

innoDB的主键索引是聚集索引，非主键索引是非聚集索引，因为非主键索引在叶子节点存的是主键索引的id

二、msyql执行计划和索引

1、explain的实战
explain的type列
这一列表示关联类型或访问类型，即MySQL决定如何查找表中的行，查找数据行记录的大概范围。
依次从最优到最差分别为：system > const > eq_ref > ref > range > index > ALL
一般来说，得保证查询达到range级别，最好达到ref

2、索引最左前缀原理

三、sql索引优化实战
①MySQL支持两种方式的排序filesort和index，Using index是指MySQL扫描索引本身完成排序。index效率高，filesort效率低。
②order by满足两种情况会使用Using index。
#1.order by语句使用索引最左前列。
#2.使用where子句与order by子句条件列组合满足索引最左前列。
③尽量在索引列上完成排序，遵循索引建立（索引创建的顺序）时的最佳左前缀法则。
④如果order by的条件不在索引列上，就会产生Using filesort。
⑤group by与order by很类似，其实质是先排序后分组，遵照索引创建顺序的最佳左前缀法则。注意where高于having，能写在where中的限定条件就不要去having限定了。
通俗理解口诀：
   全值匹配我最爱，最左前缀要遵守；
   带头大哥不能死，中间兄弟不能断；
   索引列上少计算，范围之后全失效；
   LIKE百分写最右，覆盖索引不写星；
   不等空值还有or，索引失效要少用。


in和exsits优化
原则：小表驱动大表，即小的数据集驱动大的数据集

in：当B表的数据集必须小于A表的数据集时，in优于exists 
select * from A where id in (select id from B)#等价于： 　　for select id from B　　for select * from A where A.id = B.id


exists：当A表的数据集小于B表的数据集时，exists优于in
　　将主查询A的数据，放到子查询B中做条件验证，根据验证结果（true或false）来决定主查询的数据是否保留
select * from A where exists (select 1 from B where B.id = A.id) #等价于     for select * from A     for select * from B where B.id = A.id#A表与B表的ID字段应建立索引

四、mysql锁和事务

MyISAM不支持事务，只支持表锁
InnoDB 支持事务和行锁
InnoDB行锁是通过索引上的索引项来实现的，这一点ＭySQL与Oracle不同，后者是通过在数据中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味者：只有通过索引条件检索数据，InnoDB才会使用行级锁，否则，InnoDB将使用表锁！
    在实际应用中，要特别注意InnoDB行锁的这一特性，不然的话，可能导致大量的锁冲突，从而影响并发性能。

总结
    对于ＭyISAM的表锁，主要有以下几点
    （１）共享读锁（S）之间是兼容的，但共享读锁（S）和排他写锁（X）之间，以及排他写锁之间（X）是互斥的，也就是说读和写是串行的。
    （２）在一定条件下，ＭyISAM允许查询和插入并发执行，我们可以利用这一点来解决应用中对同一表和插入的锁争用问题。
    （３）ＭyISAM默认的锁调度机制是写优先，这并不一定适合所有应用，用户可以通过设置LOW_PRIPORITY_UPDATES参数，或在INSERT、UPDATE、DELETE语句中指定LOW_PRIORITY选项来调节读写锁的争用。
    （４）由于表锁的锁定粒度大，读写之间又是串行的，因此，如果更新操作较多，ＭyISAM表可能会出现严重的锁等待，可以考虑采用InnoDB表来减少锁冲突。
 
    对于InnoDB表，主要有以下几点
    （１）InnoDB的行销是基于索引实现的，如果不通过索引访问数据，InnoDB会使用表锁。
    （２）InnoDB间隙锁机制，以及InnoDB使用间隙锁的原因。
    （３）在不同的隔离级别下，InnoDB的锁机制和一致性读策略不同。
    （４）ＭySQL的恢复和复制对InnoDB锁机制和一致性读策略也有较大影响。
    （５）锁冲突甚至死锁很难完全避免。
    在了解InnoDB的锁特性后，用户可以通过设计和SQL调整等措施减少锁冲突和死锁，包括：
尽量使用较低的隔离级别
精心设计索引，并尽量使用索引访问数据，使加锁更精确，从而减少锁冲突的机会。
选择合理的事务大小，小事务发生锁冲突的几率也更小。
给记录集显示加锁时，最好一次性请求足够级别的锁。比如要修改数据的话，最好直接申请排他锁，而不是先申请共享锁，修改时再请求排他锁，这样容易产生死锁。
不同的程序访问一组表时，应尽量约定以相同的顺序访问各表，对一个表而言，尽可能以固定的顺序存取表中的行。这样可以大减少死锁的机会。
尽量用相等条件访问数据，这样可以避免间隙锁对并发插入的影响。
不要申请超过实际需要的锁级别；除非必须，查询时不要显示加锁。
对于一些特定的事务，可以使用表锁来提高处理速度或减少死锁的可能




jvm
1. 描述一下 JVM 加载 Class 文件的原理机制?

gceasy

tomcat

tomcat io 模型
BIO：阻塞式IO，即Tomcat使用传统的java.io进行操作

nio： 非阻塞式IO，jdk1.4 之后实现的新IO，Tomcat 8.0之后默认采用该模式

APR：全称是 Apache Portable Runtime/Apache可移植运行库)，是Apache HTTP服务器的支持库。可以简单地理解为，Tomcat将以JNI的形式调用Apache HTTP服务器的核心动态链接库来处理文件读取或网络传输操作。使用需要编译安装APR 库

AIO：异步非阻塞式IO，jdk1.7后之支持 。与nio不同在于不需要多路复用选择器，而是请求处理线程执行完程进行回调调知，已继续执行后续操作。Tomcat 8之后支持。








































